// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(GovernanceDbContext))]
    [Migration("20250611000000_AiGovernanceEnhancements")]
    partial class AiGovernanceEnhancements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Backend.Models.ModelCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AiConfidence")
                        .HasColumnType("REAL");

                    b.Property<string>("AiRationale")
                        .HasColumnType("TEXT");

                    b.Property<string>("AiRiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ComplianceChecklist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FinalRiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyAlerts")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusDecision")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageEntryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UsageEntryId")
                        .IsUnique();

                    b.ToTable("ModelCards");
                });

            modelBuilder.Entity("Backend.Models.UsageEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AdversarialFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdversarialIndicators")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AiConfidence")
                        .HasColumnType("REAL");

                    b.Property<string>("AiRationale")
                        .HasColumnType("TEXT");

                    b.Property<string>("AiRecommendation")
                        .HasColumnType("TEXT");

                    b.Property<string>("AiRiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AssessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("AutoDecisionSource")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComplianceChecklist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DenialReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MajorViolations")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyAlerts")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UsageEntries");
                });

            modelBuilder.Entity("Backend.Models.ModelCard", b =>
                {
                    b.HasOne("Backend.Models.UsageEntry", "UsageEntry")
                        .WithOne("ModelCard")
                        .HasForeignKey("Backend.Models.ModelCard", "UsageEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsageEntry");
                });

            modelBuilder.Entity("Backend.Models.UsageEntry", b =>
                {
                    b.Navigation("ModelCard");
                });
#pragma warning restore 612, 618
        }
    }
}
